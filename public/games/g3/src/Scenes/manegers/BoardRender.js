import{colors}from"../../Consts/Colors.js";import{cardsImagesDataArr}from"../../Consts/Values.js";import{Card}from"../../Class/Card.js";import{getDeviceSize}from"../../js/utils/getDeviceSize.js";import{gameData}from"../../Consts/gameData.js";import{AccessibilityManager}from"./AccessibilityManager.js";export default class BoardRender{constructor(e,t,a,s,r){this.container=document.querySelector(e),this.onCardsClick=t,this.cards=[],this.elemArry=[],this.orderedArray=void 0,this.unorderedArray=void 0,this.user=a,this.size=s,this.gameMemory=r,this.accessibilityManager=new AccessibilityManager,this.presetGameElements()}presetGameElements(){document.querySelectorAll(".ruler").forEach((e=>e.style.display="flex"));let[e]=getDeviceSize(),t=Math.sqrt(this.size);if(!Number.isInteger(t))throw new Error(`Tamanho do tabuleiro inválido: ${t} cartas não formam um quadrado perfeito.`);if(this.container.style.display="grid",this.container.style.gridTemplateColumns=`repeat(${t}, ${100/t}%)`,this.container.style.border="3px solid var(--blue-baby)",this.container.style.height=`${e}px`,this.container.style.width=`${e}px`,this.container.setAttribute("tabindex","1"),this.container.setAttribute("aria-label","tabuleiro"),gameData.isScreenReaderActive||gameData.isLibrasActive){document.querySelector("#gameControls").style.display="none"}this.createPauseBtn(),this.orderedArray=this.createSortedArr(2,17),this.unorderedArray=this.createUnsortedArr(2,17)}createSortedArr(e,t){const a=Math.sqrt(t-e+1),s=new Array(t-e+1);let r=0;for(let i=0;i<a;i++)for(let o=e;o<=t;o+=a,r++)s[r]=o+i;return s}createUnsortedArr(e,t){const a=new Array(t-e+1);let s=0;for(let r=e;r<=t;r++,s++)a[s]=r;return a}createShuffledCardsArray(){const e=[];for(let t of cardsImagesDataArr)e.push([`${t.name}_1`,this.getImage(`${t.name}_1`),t.description,t.src]),e.push([`${t.name}_2`,this.getImage(`${t.name}_2`),t.description,t.src]);e.sort((()=>Math.random()-.5));let t=0;const a=["A","B","C","D"];for(let s=0;s<4;s++)for(let r=0;r<4;r++,t++)this.cards.push(new Card(e[t][0],a[r],s+1,e[t][1],e[t][2],e[t][3]))}render(e=0){document.title=`Seja bem vindo! a fase ${this.user.level} começou !`,this.container.innerHTML="",this.createShuffledCardsArray(),this.createAndSetupCardsElement(),this.mapCardsTabindex(e,this.elemArry)}createAndSetupCardsElement(){const e=gameData.isScreenReaderActive?"p":"div";this.cards.forEach(((t,a)=>{const s=document.createElement(e),r=t.imageEl;s.appendChild(r),s.setAttribute("data-index",a),s.setAttribute("tabindex",a),s.setAttribute("aria-label",`${t.location.column}${t.location.row}`),r.setAttribute("alt",t.description),r.setAttribute("title",t.name),s.classList.add("card"),s.addEventListener("click",(e=>{this.onCardsClick(e,a),document.title=this.user.treasures<=7?`${t.location.column}${t.location.row}`:`Placar da fase ${this.user.level}`})),s.addEventListener("focus",(()=>this.onCardsFocus(t,s))),this.container.appendChild(s),this.elemArry.push(s)}))}updateBoard(e=0){const t=this.container.querySelectorAll(".card");this.cards.forEach(((e,a)=>{const s=t[a];s&&(s.classList.toggle("flipped",e.isFlipped||e.isMatched),s.classList.toggle("matched",e.isMatched),s.classList.toggle("isNotMatched",e.incorrectMatch),s.setAttribute("aria-label",e.isFlipped?`${e.location.column}${e.location.row}. ${e.name}`:`${e.location.column}${e.location.row}`))})),this.mapCardsTabindex(e,this.elemArry)}resetBoard(){this.cards=[],this.elemArry=[],this.orderedArray=[],this.unorderedArray=[],this.render(),this.createPauseBtn()}mapCardsTabindex(e,t){let a=this.size,s=Math.sqrt(a),r=e%4,i=Math.floor(e/4),o=[],l=0,n=[];for(let e=0;e<a;e+=s)o.push(this.orderedArray.slice(e,e+s));o.forEach((e=>{for(let t=r;t>0;t--)l=e.pop(),e.unshift(l)}));for(let e=i;e>0;e--)l=o[4-e].pop(),o[4-e].unshift(l);for(let e=i;e>0;e--)n=o.pop(),o.unshift(n);o=o.flat(),t.forEach(((e,t)=>{e.setAttribute("tabindex",o[t])}))}onCardsFocus(e,t){if(e.isFlipped){let a=e.name.split("_")[0];t.setAttribute("aria-label",`${e.location.column}${e.location.row}. ${a}`)}}getImage(e){return gameAssets[e]}createPauseBtn(){const e=document.querySelector("#game_Container");if(e.querySelector(".pause_btn"))return;const t=document.createElement("button"),a=document.createElement("icon");let s=gameData.isPaused?"Play no jogo":"Pausar Jogo",r=gameData.isPaused?"fa-play":"fa-pause";t.setAttribute("class","pause_btn controlBtn"),t.setAttribute("id","pause"),t.setAttribute("title","botão de pausar"),t.setAttribute("tabindex","18"),t.setAttribute("aria-label",s),a.setAttribute("class",`fa-solid ${r}`),t.appendChild(a),e.appendChild(t),t.addEventListener("click",(()=>{var e,s;a.classList.contains("fa-pause")?(a.classList.remove("fa-pause"),a.classList.add("fa-play")):(a.classList.remove("fa-play"),a.classList.add("fa-pause")),gameData.isPaused=!gameData.isPaused,(gameData.isScreenReaderActive||gameData.isLibrasActive)&&(e=document.querySelector("#gameControls"),s="flex","none"!=e.style.display?e.style.display="none":e.style.display=s),gameData.isPaused?(this.gameMemory.gameDisplay.header.pauseClock(),this.gameMemory.audioManager.stopCurrentAudio(),t.style.backgroundColor=colors.green_play,this.gameMemory.isClickAble=!1):(this.gameMemory.audioManager.playAudio(gameAssets.main,1,!0),this.gameMemory.gameDisplay.header.resumeClock(),t.style.backgroundColor=colors.red_pause,this.gameMemory.isClickAble=!0);let r=gameData.isPaused?"pausado":"liberado";this.accessibilityManager.readText(`O jogo foi ${r}.`)}));let i="";t.addEventListener("mouseover",(e=>{i!==e.target&&(gameData.isLibrasActive&&this.accessibilityManager.readWithAccessibility(""+(gameData.isPaused?"botão play":"botão pausar")),setTimeout((()=>i=""),1e3))}))}removePauseBtn(){document.querySelector(".pause_btn")?.remove()}}export{BoardRender};